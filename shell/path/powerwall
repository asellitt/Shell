#!/bin/bash

#######################################################
# Release Notes:
#
# Powerwall stats dumper for openhab
# Created by Vince Loschiavo - 2021-02-21
# As of Tesla Powerwall version 20.49.0, the powerwall gateway requires you authenticate for every stat.
#
# This script will login to the powerwall once per day to refresh the cookie, grab the JSON output from the powerwall and
#  send it to STDOUT for parsing by your tool of choice.
#
# Requires bitwarden and jq
#
# Example URLs:
# meters/aggregates
# system_status/soe
# system_status/grid_status
# sitemaster
# powerwalls
# status
#
#
#######################################################
# Usage:
# ./powerwall API/YOU/WANT/TO/COLLECT
#
# eg:
# ./powerwall meters/aggregates
#######################################################


#######################################################
# User Modified Variables
#######################################################
URI=""
PASSWORD=""
EMAIL=""


#######################################################
# Static Definitions
#######################################################
USERNAME="customer"
COOKIE="/var/tmp/powerwall.cookie"
API=$1


#######################################################
# Subroutines
#######################################################

get_credentials () {
  if hash bw 2>/dev/null && hash jq 2>/dev/null; then
    CREDS=$(bw get item powerwall)
    URI=$(echo $CREDS | jq -r ".login.uris[0].uri")
    PASSWORD=$(echo $CREDS | jq -r ".login.password")
    EMAIL=$(echo $CREDS | jq -r ".login.username")
  fi
}

# Create a valid Cookie
create_cookie () {
  # Delete the old cookie if it exists
  if [ -f $COOKIE ]; then
    rm -f $COOKIE
  fi

  # Login and Create new cookie
  curl -s -k -i -c $COOKIE -X POST -H "Content-Type: application/json" -d "{\"username\":\"$USERNAME\",\"password\":\"$PASSWORD\", \"email\":\"$EMAIL\",\"force_sm_off\":false}" "$URI/api/login/Basic"

  # If Login fails, then throw error and exit
  if [ $? -eq 200 ]; then
    echo "Login failed"
    exit;
  fi
}


# Check for a valid cookie
valid_cookie () {
  # if cookie doesnt exist, then login and create the cookie
  if [ ! -f $COOKIE ]; then
      # Cookie not present. Creating cookie.
    create_cookie
  fi

  # If the cookie is older than one day old, refresh the cookie
  # Collect both times in seconds-since-the-epoch
  ONE_DAY_AGO=$(date -v -1d +%s)
  FILE_TIME=$(date -r "$COOKIE" +%s)

  if [ "$FILE_TIME" -le "$ONE_DAY_AGO" ]; then
    #The cookie is older than 1 days; get a new cookie
    create_cookie
  fi
}


getstat () {
  curl -k -s -b $COOKIE "$URI/api/$API"
}


#######################################################
# Main
#######################################################

get_credentials
# Check for a valid cookie or login and create one
valid_cookie
# Get URL like meters/aggregates
getstat
